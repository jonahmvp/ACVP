<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7991 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7991.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY I-D.ribose-asciirfc SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3//reference.I-D.draft-ribose-asciirfc-08.xml">
<!ENTITY RFC3552 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5378 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5378.xml">
<!ENTITY RFC7253 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7253.xml">
]>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<rfc ipr="trust200902" category="info" submissionType="IETF" docName="draft-celi-acvp-pbkdf-00">
<front>
  <title abbrev="ACVP PBKDF">ACVP Password-based Key Derivation Function JSON Specification</title>
  <author fullname="Christopher Celi" surname="Celi" initials="C. C.">
    <organization>National Institute of Standards and Technology</organization>
    <address>
      <postal>
        <street>100 Bureau Drive</street>
        <city>Gaithersburg</city>
        <code>20899</code>
        <country>United States of America</country>
      </postal>
      <email>christopher.celi@nist.gov</email>
    </address>
  </author>
  <date day="5" month="June" year="2019"/>
  <area>Internet</area>

<abstract>
  <t>This document defines the JSON schema for testing Password-based KDF implementations with the ACVP specification.</t>
</abstract>
</front><middle>
<section anchor="introduction" title="Introduction">
  <t>The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically verify the cryptographic implementation of a software or hardware crypto module. The ACVP specification defines how a crypto module communicates with an ACVP server, including crypto capabilities negotiation, session management, authentication, vector processing and more. The ACVP specification does not define algorithm specific JSON constructs for performing the crypto validation. A series of ACVP sub-specifications define the constructs for testing individual crypto algorithms. Each sub-specification addresses a specific class of crypto algorithms. This sub-specification defines the JSON constructs for testing Password-based KDF implementations using ACVP.</t>
</section>
<section anchor="conventions" title="Terms and Definitions"><t>The key words "<spanx style="strong">MUST</spanx>", "<spanx style="strong">MUST NOT</spanx>", "<spanx style="strong">REQUIRED</spanx>", "<spanx style="strong">SHALL</spanx>",
"<spanx style="strong">SHALL NOT</spanx>", "<spanx style="strong">SHOULD</spanx>", "<spanx style="strong">SHOULD NOT</spanx>", "<spanx style="strong">RECOMMENDED</spanx>",
"<spanx style="strong">NOT RECOMMENDED</spanx>", "<spanx style="strong">MAY</spanx>", and "<spanx style="strong">OPTIONAL</spanx>" in this
document are to be interpreted as described in BCP 14
<xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in
all capitals, as shown here.</t>
<t>This document also refers to the following terms and
definitions:</t>
<t>
  <list style="hanging">
    <t hangText="Prompt"><vspace blankLines="0"/>thing</t>
    <t hangText="Registration"><vspace blankLines="0"/>thing</t>
    <t hangText="Response"><vspace blankLines="0"/>thing</t>
    <t hangText="Test Case"><vspace blankLines="0"/>thing</t>
    <t hangText="Test Group"><vspace blankLines="0"/>thing</t>
    <t hangText="Test Vector Set"><vspace blankLines="0"/>thing</t>
    <t hangText="Validation"><vspace blankLines="0"/>thing</t>
  </list>
</t></section>
<section anchor="supported" title="Supported KDFs"><t>The following key derivation functions <spanx style="strong">MAY</spanx> be advertised by the ACVP compliant cryptographic module:</t>
<t>
  <list style="symbols">
    <t>ACVP-KDF-PBKDF</t>
  </list>
</t></section>
<section anchor="testtypes" title="Test Types and Test Coverage"><t>This section describes the design of the tests used to validate Password-based KDF implementations. There is only one test type: functional tests. Each has a specific value to be used in the testType field. The testType field definitions are:</t>
<t>"AFT" - Algorithm Functional Test. These tests can be processed by the client using a normal 'derive_key' operation. AFTs cause the implementation under test to exercise nomral operations on a single block, multiple blocks, or partial blocks. In all cases, random data is used. The functional tests are designed to verify that the logical components of the key deriviation process are operating correctly.</t>
<section anchor="_test_coverage" title="Test Coverage">
  <t>The tests described in this document have the intention of ensuring an implementation is conformant to XXX.</t>
</section></section>
<section anchor="capabilities" title="Capabilities Registration"><t>ACVP requires crypto modules to register their capabilities. This allows the crypto module to advertise support for specific algorithms, notifying the ACVP server which algorithms need test vectors generated for the validation process.</t>
<t>The algorithm capabilities are advertised as JSON objects within the 'algorithms' value of the ACVP registration message. The 'algorithms' value is an array, where each array element is an individual JSON object defined in this section. The 'algorithms' value is part of the 'capability_exchange' element of the ACVP JSON registration message. See the ACVP specification for more details on the registration message.</t>
<section anchor="prerequisites" title="Prerequisites"><t>Each algorithm implementation <spanx style="strong">MAY</spanx> rely on other cryptographic primitives.	For example, XXXXXX. Each of these underlying algorithm primitives must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</t>
<t>Prerequisites, if applicable, <spanx style="strong">MUST</spanx> be submitted in the registration as the 'prereqVals' JSON property array inside each element of the 'algorithms' array. Each element in the 'prereqVals' array <spanx style="strong">MUST</spanx> contain the following properties</t>
<texttable suppress-title="false" style="full">
  <ttcol align="left">JSON Property</ttcol>
  <ttcol align="left">Description</ttcol>
  <ttcol align="left">JSON Type</ttcol>
  <ttcol align="left">Valid Values</ttcol>
  <c>algorithm</c>
  <c>a prerequisite algorithm</c>
  <c>string</c>
  <c>XXX</c>
  <c>valValue</c>
  <c>algorithm validation number</c>
  <c>string</c>
  <c>XXX</c>
</texttable>
<t>A "valValue" of "same" <spanx style="strong">SHALL</spanx> be used to indicate that the prerequisite is being met by a different algorithm in the capability exchange in the same registration.</t>
<t>An example description of prequisites within a single algorithm capability exchange looks like this</t>
<figure>
  <artwork><![CDATA[
"prereqVals":
[
	{
		"algorithm": "Alg1",
		"valValue": "Val-1234"
	},
	{
		"algorithm": "Alg2",
		"valValue": "same"
	}
]
]]></artwork>
</figure></section>
<section anchor="properties" title="Property Registration">
  <t>The Password-based KDF mode capabilities are advertised as JSON objects within the 'capabilities_exchange' property.</t>
</section>
<section anchor="_registration_example" title="Registration Example"><t>A registration <spanx style="strong">SHALL</spanx> use these properties</t>
<texttable suppress-title="false" style="full">
  <ttcol align="left">JSON Property</ttcol>
  <ttcol align="left">Description</ttcol>
  <ttcol align="left">JSON Type</ttcol>
  <ttcol align="left">Valid Values</ttcol>
  <c>algorithm</c>
  <c>Name of the algorithm to be validated</c>
  <c>string</c>
  <c>"kdf-components"</c>
  <c>mode</c>
  <c>Mode of the algorithm to be validated</c>
  <c>string</c>
  <c>"pbkdf"</c>
  <c>revision</c>
  <c>ACVP Test version</c>
  <c>string</c>
  <c>"1.0"</c>
  <c>capabilities</c>
  <c>Array of capabilities</c>
  <c>array</c>
  <c>Each object in the array contains the below properties</c>
  <c>prereqVals</c>
  <c>Prerequisites of the algorithm</c>
  <c>object</c>
  <c>See <xref target="prerequisites"/></c>
  <c>iterationCount</c>
  <c>Number of hash interations</c>
  <c>domain</c>
  <c>Min: 1, Max: 10000000</c>
  <c>keyLen</c>
  <c>The length of the output key in bits</c>
  <c>domain</c>
  <c>Min: 112, Max: 4096</c>
  <c>passwordLen</c>
  <c>The length of the password in bytes (characters)</c>
  <c>domain</c>
  <c>Min: 8, Max: 128</c>
  <c>saltLen</c>
  <c>The length of the salt in bits</c>
  <c>domain</c>
  <c>Min: 128, Max: 4096</c>
  <c>hmacAlg</c>
  <c>The supported hash algorithms used for HMAC</c>
  <c>array</c>
  <c>See <xref target="valid-sha"/></c>
</texttable>
<t>An example registration within an algorithm capability exchange looks like this</t>
<figure>
  <artwork><![CDATA[
"algorithms":[
  {
    "revision":"1.0",
    "algorithm":"kdf-components",
    "mode":"pbkdf",
    "prereqVals":[
      {
        "algorithm":"SHA",
        "valValue":"same"
      }
    ],
    "iterationCount":[
      {
        "min":10,
        "max":1000,
        "increment":1
      }
    ],
    "keyLen":[
      {
        "min":8,
        "max":4096,
        "increment":8
      }
    ],
    "passwordLen":[
      {
        "min":8,
        "max":128,
        "increment":1
      }
    ],
    "saltLen":[
      {
        "min":128,
        "max":4096,
        "increment":8
      }
    ],
    "hashAlg":[
      "SHA-1",
      "SHA2-224",
      "SHA2-256",
      "SHA2-384",
      "SHA2-512",
      "SHA3-224",
      "SHA3-256",
      "SHA3-384",
      "SHA3-512"
    ]
  }
]
]]></artwork>
</figure>
<section anchor="valid-sha" title="Valid Hash Functions"><t>The following hash functions <spanx style="strong">MAY</spanx> be advertised by an ACVP compliant client under the 'hmacAlg' property</t>
<t>
  <list style="symbols">
    <t>SHA-1</t>
    <t>SHA2-224</t>
    <t>SHA2-256</t>
    <t>SHA2-384</t>
    <t>SHA2-512</t>
    <t>SHA2-512/224</t>
    <t>SHA2-512/256</t>
    <t>SHA3-224</t>
    <t>SHA3-256</t>
    <t>SHA3-384</t>
    <t>SHA3-512</t>
  </list>
</t></section></section></section>
<section anchor="test-vectors" title="Test Vectors"><t>The ACVP server provides test vectors to the ACVP client, which are then processed and returned to the ACVP server for validation. A typical ACVP validation test session would require multiple test vector sets to be downloaded and processed by the ACVP client. Each test vector set represents an individual algorithm defined during the capability exchange. This section describes the JSON schema for a test vector set used with Password-based KDF algorithms.</t>
<t>The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire vector set as well as individual test vectors to be processed by the ACVP client. The following table describes the JSON elements at the top level of the hierarchy</t>
<texttable suppress-title="false" style="full">
  <ttcol align="left">JSON Values</ttcol>
  <ttcol align="left">Description</ttcol>
  <ttcol align="left">JSON Type</ttcol>
  <c>acvVersion</c>
  <c>Protocol version identifier</c>
  <c>string</c>
  <c>vsId</c>
  <c>Vector set identifier</c>
  <c>integer</c>
  <c>algorithm</c>
  <c>Algorithm defined in the capability exchange</c>
  <c>string</c>
  <c>mode</c>
  <c>Mode defined in the capability exchange</c>
  <c>string</c>
  <c>revision</c>
  <c>Protocol test revision selected</c>
  <c>string</c>
  <c>testGroups</c>
  <c>Array of test groups containing test data</c>
  <c>array</c>
</texttable>
<t>An example of this would look like this</t>
<figure>
  <artwork><![CDATA[
{
	"acvVersion": "version",
	"vsId": 1,
	"algorithm": "Alg1",
	"mode": "Mode1",
	"revision": "Revision1.0",
	"testGroups": [ ... ]
}
]]></artwork>
</figure>
<section anchor="_test_groups" title="Test Groups"><t>The testGroups element at the top level in the test vector JSON object is an array of test	groups. Test vectors are grouped into similar test cases to reduce the amount of data transmitted in the vector set. For instance, all test vectors that use the same key size would be grouped	together. The Test Group JSON object contains meta data that applies to all test vectors within	the group. The following table describes the Password-based KDF JSON elements of the Test Group JSON object</t>
<texttable suppress-title="false" style="full">
  <ttcol align="left">JSON Values</ttcol>
  <ttcol align="left">Description</ttcol>
  <ttcol align="left">JSON Type</ttcol>
  <c>tgId</c>
  <c>Test group identifier</c>
  <c>integer</c>
  <c>hmacAlg</c>
  <c>The hash algorithm used in HMAC</c>
  <c>string</c>
  <c>testType</c>
  <c>Describes the operation the client should perform on the tests data</c>
  <c>string</c>
  <c>tests</c>
  <c>Array of individual test cases</c>
  <c>array</c>
</texttable>
<t>The 'tgId', 'testType' and 'tests' objects <spanx style="strong">MUST</spanx> appear in every test group element communicated from the server to the client as a part of a prompt. Other properties are dependent on which 'testType' the group is addressing.</t></section>
<section anchor="_test_cases" title="Test Cases"><t>Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each Password-based KDF test vector.</t>
<texttable suppress-title="false" style="full">
  <ttcol align="left">JSON Values</ttcol>
  <ttcol align="left">Description</ttcol>
  <ttcol align="left">JSON Type</ttcol>
  <c>tcId</c>
  <c>Test case idenfitier</c>
  <c>integer</c>
  <c>keyLen</c>
  <c>Length of the output key</c>
  <c>integer</c>
  <c>salt</c>
  <c>Salt value</c>
  <c>hex</c>
  <c>password</c>
  <c>Password value</c>
  <c>string</c>
  <c>iterationCount</c>
  <c>Number of iterations</c>
  <c>integer</c>
</texttable>
<t>Here is an abbreviated yet fully constructed example of the prompt</t>
<figure>
  <artwork><![CDATA[
{
  "vsId": 1,
  "algorithm": "kdf-components",
  "mode": "PBKDF",
  "revision": "1.0",
  "testGroups": [
    {
      "tgId": 1,
      "testType": "AFT",
      "hmacAlg": "SHA2-224",
      "tests": [
        {
          "tcId": 1,
          "keyLen": 143,
          "salt": "BC902BA1EB3BD8519B68022F0FC15600D5D27A",
          "password": "FSLuCqOV",
          "iterationCount": 955
        },
        {
          "tcId": 2,
          "keyLen": 188,
          "salt": "8120C1DED77061BC5ED637DD51174F12",
          "password": "HCmKuigqgFlqpJv",
          "iterationCount": 269
        }
      ]
    }
  ]
}
]]></artwork>
</figure></section></section>
<section anchor="responses" title="Responses"><t>After the ACVP client downloads and processes a vector set, it must send the response vectors back to the ACVP server. The following table describes the JSON object that represents a vector set response.</t>
<texttable suppress-title="false" style="full">
  <ttcol align="left">JSON Property</ttcol>
  <ttcol align="left">Description</ttcol>
  <ttcol align="left">JSON Type</ttcol>
  <c>acvVersion</c>
  <c>The version of the protocol</c>
  <c>string</c>
  <c>vsId</c>
  <c>The vector set identifier</c>
  <c>integer</c>
  <c>testGroups</c>
  <c>The test group data</c>
  <c>array</c>
</texttable>
<t>An example of this is the following</t>
<figure>
  <artwork><![CDATA[
{
	"acvVersion": "version",
	"vsId": 1,
	"testGroups": [ ... ]
}
]]></artwork>
</figure>
<t>The testGroups section is used to organize the ACVP client response in a similar manner to how it receives vectors. Several algorithms <spanx style="strong">SHALL</spanx> require the client to send back group level properties in their response. This structure helps accommodate that.</t>
<texttable suppress-title="false" style="full">
  <ttcol align="left">JSON Property</ttcol>
  <ttcol align="left">Description</ttcol>
  <ttcol align="left">JSON Type</ttcol>
  <c>tgId</c>
  <c>The test group identifier</c>
  <c>integer</c>
  <c>tests</c>
  <c>The test case data</c>
  <c>array</c>
</texttable>
<t>An example of this is the following</t>
<figure>
  <artwork><![CDATA[
{
	"tgId": 1,
	"tests": [ ... ]
}
]]></artwork>
</figure>
<t>The following table describes the JSON object that represents a test case response for a Password-based KDF.</t>
<texttable suppress-title="false" style="full">
  <ttcol align="left">JSON Property</ttcol>
  <ttcol align="left">Description</ttcol>
  <ttcol align="left">JSON Type</ttcol>
  <c>tcId</c>
  <c>The test case identifier</c>
  <c>integer</c>
  <c>derivedKey</c>
  <c>The outputted key</c>
  <c>hex</c>
</texttable>
<t>Here is an abbreviated example of the response</t>
<figure>
  <artwork><![CDATA[
{
  "vsId": 1,
  "algorithm": "kdf-components",
  "mode": "pbkdf",
  "revision": "1.0",
  "testGroups": [
    {
      "tgId": 1,
      "tests": [
        {
          "tcId": 1,
          "derivedKey": "986B212420E3B977068244E6BD..."
        },
        {
          "tcId": 2,
          "derivedKey": "B8F3EEC6B5FA270FB05644DE40..."
        }
      ]
    }
  ]
}
]]></artwork>
</figure></section>
<section anchor="security" title="Security Considerations">
  <t>There are no additional security considerations outside of those outlined in the ACVP document.</t>
</section>
<section anchor="iana" title="IANA Considerations">
  <t>This document does not require any action by IANA.</t>
</section>
<section anchor="acknowledgements" title="Acknowledgements">
  <t>There are no acknowledgements.</t>
</section>
</middle><back>
<references title="Normative References">
  &RFC2119;
  &RFC7991;
  &RFC8174;
</references>
<references title="Informative References">
  <reference anchor="IETF.TLP" target="https://trustee.ietf.org/trust-legal-provisions.html">
  <front>
  <title>IETF Trust Legal Provisions (TLP)</title>
  <author>
    <organization>IETF</organization>
  </author>
  <date month="April" day="12" year="2018"/>
  </front>
</reference>
  <reference anchor="RNP" target="https://github.com/riboseinc/rnp/">
  <front>
    <title>RNP: A C library approach to OpenPGP</title>
    <author>
      <organization>Ribose Inc.</organization>
      <address>
        <postal>
          <street>Suite 1111, 1 Pedder Street</street>
          <city>Central</city>
          <region>Hong Kong</region>
          <country>Hong Kong</country>
        </postal>
        <email>open.source@ribose.com</email>
        <uri>https://www.ribose.com</uri>
      </address>
    </author>
    <date day="31" month="March" year="2018"/>
  </front>
</reference>
  &I-D.ribose-asciirfc;
  &RFC3552;
  &RFC5378;
  &RFC7253;
</references>
</back>
</rfc>
